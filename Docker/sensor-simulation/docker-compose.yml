version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: sensor_data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  # Grafana Service
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_AUTH_DISABLE_LOGIN_FORM: "true"  # Disable login form to enforce SSO
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"  # Enable OAuth2
      GF_AUTH_GENERIC_OAUTH_NAME: "Keycloak"
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "grafana"
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "your-client-secret"  # Replace with your client secret
      GF_AUTH_GENERIC_OAUTH_SCOPES: "openid"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "http://nuraiym.com/keycloak/auth/realms/your-realm/protocol/openid-connect/auth"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "http://nuraiym.com/keycloak/auth/realms/your-realm/protocol/openid-connect/token"
      GF_AUTH_GENERIC_OAUTH_API_URL: "http://nuraiym.com/keycloak/auth/realms/your-realm/protocol/openid-connect/userinfo"
    depends_on:
      - postgres
      - keycloak
    networks:
      - backend

  # Python Sensor Data Generator
  python:
    build:
      context: ./python
    container_name: sensor_generator
    environment:
      DB_HOST: postgres
      DB_NAME: sensor_data
      DB_USER: user
      DB_PASSWORD: password
    depends_on:
      - postgres
    networks:
      - backend

  # Keycloak Authentication Server
  keycloak:
    image: keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    command: start-dev  # Start in dev mode
    networks:
      - backend

  # Nginx Reverse Proxy for HTTP & SSO
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    environment:
      DEFAULT_HOST: "localhost"
      VIRTUAL_HOST: "localhost"
      # Ensure that VIRTUAL_PROTO and VIRTUAL_PORT are omitted if not needed for HTTP only
    ports:
      - "80:80"   # HTTP
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro  # Docker socket for automatic proxy discovery
      - ./nginx.conf:/etc/nginx/nginx.conf        # Custom Nginx configuration
      - ./index.html:/usr/share/nginx/html/index.html  # Your custom index.html
    depends_on:
      - grafana
      - keycloak
    networks:
      - backend


networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
