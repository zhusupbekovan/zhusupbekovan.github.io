version: '3'

services:
  web:
    build:
      context: ./nginx
    ports:
      - "80:80"
    networks:
      - backend
    depends_on:
      - grafana
      - pgadmin

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: sensor_data
    volumes:
      - postgres_data:/var/lib/postgresql/data      # Persistent volume for PostgreSQL data
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      # Disable OAuth configuration
      GF_AUTH_GENERIC_OAUTH_ENABLED: "false"
      GF_SERVER_ROOT_URL: "http://nuraiym.test:3000"
      GF_DATASOURCE_NAME: 'postgres'                # Data source name
      GF_DATASOURCE_TYPE: 'postgres'                # Type of data source
      GF_DATASOURCE_URL: 'http://postgres:5432'     # PostgreSQL container URL (using service name 'postgres')
      GF_DATASOURCE_ACCESS: 'proxy'                 # Use proxy mode to access DB
      GF_DATASOURCE_IS_DEFAULT: 'true'              # Make it the default data source
      GF_DATASOURCE_USER: 'user'                   # PostgreSQL username
      GF_DATASOURCE_PASSWORD: 'password'           # PostgreSQL password
    depends_on:
      - postgres
    networks:
      - backend
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana               # Persistent volume for Grafana data (including data sources)

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com     # Replace with your email
      PGADMIN_DEFAULT_PASSWORD: admin              # Replace with your password
    ports:
      - "5050:80"
    networks:
      - backend
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin              # Persistent volume for pgAdmin data

  python:
    build:
      context: ./python
    container_name: data_generator
    environment:
      DB_HOST: postgres
      DB_NAME: sensor_data
      DB_USER: user
      DB_PASSWORD: password
    depends_on:
      - postgres
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:                                    # Persistent volume for PostgreSQL data
    driver: local
  grafana_data:                                     # Persistent volume for Grafana data
    driver: local
  pgadmin_data:                                     # Persistent volume for pgAdmin data
    driver: local
